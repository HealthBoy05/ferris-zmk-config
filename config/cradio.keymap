// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        key_layer_behaviour: key_layer_behaviour {
            compatible = "zmk,behavior-hold-tap";
            label = "KEY_LAYER_BEHAVIOUR";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <250>;
        };

        key_key_behaviour: key_key_behaviour {
            compatible = "zmk,behavior-hold-tap";
            label = "KEY_KEY_BEHAVIOUR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            retro-tap;
            tapping-term-ms = <0>;
        };

        key_key_timed_behaviour: key_key_timed_behaviour {
            compatible = "zmk,behavior-hold-tap";
            label = "KEY_KEY_TIMED_BEHAVIOUR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };
    };

    combos {
        compatible = "zmk,combos";

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <20 21>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q  &kp W  &kp F  &kp P                     &kp B                                          &kp J                                 &kp L                                &kp U                                &kp Y                     &kp SEMI
&kp A  &kp R  &kp S  &key_layer_behaviour 4 T  &kp G                                          &kp M                                 &key_key_timed_behaviour LEFT_WIN N  &key_key_timed_behaviour LEFT_ALT E  &key_layer_behaviour 3 I  &kp O
&kp X  &kp C  &kp D  &kp V                     &kp Z                                          &kp K                                 &kp H                                &kp COMMA                            &kp DOT                   &kp FSLH
                     &mo 1                     &key_key_timed_behaviour LEFT_CONTROL SPACE    &key_key_behaviour LEFT_SHIFT RETURN  &mo 2
            >;
        };

        number_layer {
            bindings = <
&trans        &kp N7  &kp N8  &kp N9  &trans    &trans      &trans         &trans  &trans     &trans
&kp NUMBER_0  &kp N4  &kp N5  &kp N6  &trans    &kp LEFT    &kp DOWN       &kp UP  &kp RIGHT  &trans
&trans        &kp N1  &kp N2  &kp N3  &trans    &kp DELETE  &trans         &trans  &trans     &trans
                              &trans  &trans    &trans      &kp BACKSPACE
            >;
        };

        symbol_layer {
            bindings = <
&trans             &kp AMPERSAND  &kp ASTERISK  &kp SQT        &kp TILDE    &kp TAB        &kp LBKT              &kp RBKT               &kp UNDERSCORE  &kp EQUAL
&kp DOUBLE_QUOTES  &kp DOLLAR     &kp PERCENT   &kp CARET      &kp PIPE     &kp BACKSLASH  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp MINUS       &kp PLUS
&trans             &kp EXCL       &kp AT_SIGN   &kp HASH       &kp GRAVE    &kp DELETE     &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp LESS_THAN   &kp GREATER_THAN
                                                &kp BACKSPACE  &trans       &trans         &trans
            >;
        };

        function_layer {
            bindings = <
&kp F12  &kp F7  &kp F8  &kp F9  &trans    &trans  &trans  &trans  &trans  &trans
&kp F11  &kp F4  &kp F5  &kp F6  &trans    &trans  &trans  &trans  &trans  &trans
&kp F10  &kp F1  &kp F2  &kp F3  &trans    &trans  &trans  &trans  &trans  &trans
                         &trans  &trans    &trans  &trans
            >;
        };

        connection_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans    &trans      &trans        &trans        &trans        &trans
&trans  &trans  &trans  &trans  &trans    &trans      &bt BT_SEL 3  &bt BT_SEL 4  &trans        &trans
&trans  &trans  &trans  &trans  &trans    &trans      &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &trans
                        &trans  &trans    &bt BT_CLR  &trans
            >;
        };
    };
};
